---
title: "final"
author: "전현지"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---

```{python}
#| output: false
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
import json
import requests
import pickle

#--#
import folium

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"



df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)

# 요일 정리 dct
dct = {0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'}

# tidydata
tidydata = df.pivot_table(
    index = 'pickup_hour',
    columns = 'dayofweek',
    values = 'speed',
    aggfunc = 'mean'
).stack().reset_index().rename({0:'speed'}, axis = 1).sort_values('dayofweek').assign(dayofweek = lambda df : df.dayofweek.map(dct))
tidydata

#문제 1
fig = px.density_heatmap(
    data_frame = tidydata,
    x = 'pickup_hour',
    y = 'dayofweek',
    z = 'speed',
    nbinsx=24,
    nbinsy=7,
    height=300

)
fig.data[0]['hovertemplate'] = 'pickup_hour=%{x}<br>dayofweek=%{y}<br>sum of speed_mean=%{z}<extra></extra>'

layout = {'xaxis':{'title':'pickup 시간'},
          'yaxis':{'title':'요일'},
          'coloraxis': {'colorbar': {'title': {'text': '평균속력'}}}

}
fig1 = fig.update_layout(layout)
fig1.show()


#문제2
# tidydata
tidydata = df.pivot_table(
    index = 'pickup_hour',
    columns = 'dayofweek',
    values = 'dist',
    aggfunc = 'mean'
).stack().reset_index().rename({0:'dist'}, axis = 1).sort_values('dayofweek').assign(dayofweek = lambda df : df.dayofweek.map(dct))

tidydata

# 최종그림
fig = px.density_heatmap(
    data_frame = tidydata,
    x = 'pickup_hour',
    y = 'dayofweek',
    z = 'dist',
    nbinsx=24,
    nbinsy=7,
    height=300

)
fig.data[0]['hovertemplate'] = 'pickup_hour=%{x}<br>dayofweek=%{y}<br>sum of dist_mean=%{z}<extra></extra>'

layout = {'xaxis':{'title':'pickup 시간'},
          'yaxis':{'title':'요일'},
          'coloraxis': {'colorbar': {'title': {'text': '평균이동거리'}}}

}
fig2 = fig.update_layout(layout)
fig2.show()




#문제3
# 데이터 전처리(pickup, dropoff df 추출 함수만들고 -> groupby id 별로 )
pcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']
dcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']
def transform(df):
    pickup = df.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')
    dropoff = df.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')
    return pd.concat([pickup,dropoff],axis=0)

df_left = df_small.drop(pcol+dcol,axis=1)
df_right = pd.concat([transform(df) for i, df in df_small.groupby('id')]).reset_index(drop=True)
df_small2 = df_left.merge(df_right)
df_small2 = df_small2.sort_values('speed')

# tidydata
tidydata = df_small2.assign(speed_cut = pd.qcut(df_small2.speed,4,labels = ['매우느림','조금느림','조금빠름','매우빠름']))
tidydata

#최종그림
fig = px.line_mapbox(
    data_frame=tidydata,
    lat = 'latitude',
    lon = 'longitude',
    color = 'speed_cut',
    line_group = 'id',
    center = {'lat':40.7322, 'lon':-73.9052},
    #---#
    mapbox_style = 'carto-positron',
    zoom = 11
)
scatter_data = px.scatter_mapbox(
    data_frame=tidydata,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 7,
    color = 'speed_cut',
    #---#
    mapbox_style = 'carto-positron',
    zoom = 11
).data

for sd in scatter_data:
    fig.add_trace(sd)

for i in fig.data:
  if i['mode'] == 'lines':
    i['name'] = i['name'] + '(path)'
  else:
    i['name'] = i['name'] + '(pickup/dropoff)'

layout = {'legend': {'title': {'text': '평균속력'}}}
fig3 = fig.update_layout(layout)

fig3.show(config={'scrollZoom':False})

```
# 기말고사1-(1),(2),(3)

```{python}
#| title: 요일,시간에 따른 평균속력 시각화        
fig1.show()
```

```{python}
#| title: 요일,시간에 따른 평균이동거리 시각화        
fig2.show()
```

```{python}
#| title: 속력별 경로시각화        
fig3.show(config={'scrollZoom':False})
```







# 기말고사2-(1),(2)

```{python}
#| output: false
# 데이터 불러오기
global_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)
local_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)
#--#
url = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'
prov = ['Seoul', 'Busan', 'Daegu', 'Incheon',
        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi',
        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do',
        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do',
        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']
df = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\
.assign(년도 = lambda df: df.년도.astype(int))\
.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\
.reset_index()
df.head()

# 데이터 정리
df_global = pd.DataFrame([l['properties'] for l in global_dict['features']])
df_local = pd.DataFrame([l['properties'] for l in local_dict['features']])

# _dct : 전주시완산구 -> 전주시-완산구 
_dct = dict()
for name in df_local['name']:
    if ('시' in name) and ('구' in name) and (len(name)>3):
      a,b = name.split('시')
      _dct[name] = a+'시'+'-'+b

# dict 파일 연결
df_json = df_local.assign(local_changed = df_local.name).set_index('local_changed').rename(_dct).reset_index()\
.set_index('name')\
.rename(
    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)>3)}
).reset_index()\
.drop(['base_year','name_eng'],axis=1)\
.rename({'name':'name_local','code':'code_local'},axis=1)\
.assign(code = lambda df: df['code_local'].str[:2])\
.merge(df_global.drop(['base_year','name_eng'],axis=1))
df_json

# df_left, df_right
df_left = df.assign(
    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})
).assign(on = lambda df: df.시도 + '-' + df.지역)

df_right = df_json.assign(on = lambda df: df.name + '-' + df.name_local)\
.drop(['name_local','name'],axis=1)

df2 = df_left.merge(
    df_right.set_index('on')\
    .rename({'인천광역시-남구':'인천광역시-미추홀구'})\
    .reset_index()
).drop(['on'],axis=1)
df2

###############문제 1

# tidydata
tidydata = df2.assign(a = df2.시도 + '/' + df2.local_changed).set_index('a').rename({'인천광역시/남구' : '인천광역시/미추홀구'}, axis = 0).reset_index().assign(지역 = lambda _df : _df.a.str.split('/').str[1])\
.drop(['a','local_changed'], axis = 1).assign(에너지사용량차이 =(lambda _df : _df['에너지사용량(TOE)/전기'] - _df['에너지사용량(TOE)/도시가스']) ).rename({'에너지사용량차이':'에너지사용량차이(전기-도시가스)'},axis = 1)
tidydata

# dict 정리
_lst = tidydata.query("시도=='서울특별시' or 시도 == '경기도' or 시도 == '인천광역시' ")['code'].unique()

sudo_dict = local_dict.copy()
sudo_dict['features'] = [l for l in sudo_dict['features'] if l['properties']['code'][:2] in _lst]

#최종 figure
fig4 = px.choropleth_mapbox(
    geojson = sudo_dict,
    featureidkey = 'properties.code',
    data_frame = tidydata,
    locations = 'code_local',
    color = '에너지사용량차이(전기-도시가스)',
    animation_frame= '년도',
    hover_data = ['시도','지역'],
    #---#
    mapbox_style="carto-positron",
    range_color = [min(tidydata['에너지사용량차이(전기-도시가스)']),max(tidydata['에너지사용량차이(전기-도시가스)'])],
    center={"lat": 37.5642135, "lon": 127.0016985},
    opacity = 0.5,
    zoom=7.5,
    height=800,
    width=750
)
fig4.show(config={'scrollZoom':False})
######################문제2

df3 = df2.assign(a = df2.시도 + '/' + df2.local_changed).set_index('a').rename({'인천광역시/남구' : '인천광역시/미추홀구'}, axis = 0).reset_index().assign(지역 = lambda _df : _df.a.str.split('/').str[1])\
.drop(['a','local_changed'], axis = 1)
df3

sol2_right = df3.query("지역 == '김포시' or 시도 == '서울특별시'")\
.pivot_table(index = '년도', values = ['에너지사용량(TOE)/전기','에너지사용량(TOE)/도시가스','에너지사용량(TOE)/지역난방'],aggfunc = 'sum').assign(에너지사용량 = lambda _df : _df['에너지사용량(TOE)/전기']+_df['에너지사용량(TOE)/도시가스'] + _df['에너지사용량(TOE)/지역난방']).reset_index()\
.drop(['에너지사용량(TOE)/전기','에너지사용량(TOE)/도시가스','에너지사용량(TOE)/지역난방'],axis = 1)

sol2_right

sol2_left = df3.query("지역 == '김포시' or 시도 == '서울특별시'")
sol2_left

#tidydata
tidydata = sol2_left.merge(sol2_right).assign(에너지사용비율 = lambda _df : (_df['에너지사용량(TOE)/전기']+_df['에너지사용량(TOE)/도시가스']+_df['에너지사용량(TOE)/지역난방'])/_df['에너지사용량'])
tidydata

## dict 정리
_lst = tidydata.query("시도=='서울특별시' or 지역 == '김포시' ")['code_local'].unique()
_lst
new_seoul_dict = local_dict.copy()
new_seoul_dict['features'] = [l for l in new_seoul_dict['features'] if l['properties']['code'] in _lst]

# 최종 그림
fig5 = px.choropleth_mapbox(
    geojson = new_seoul_dict,
    featureidkey = 'properties.code',
    data_frame = tidydata,
    locations = 'code_local',
    color = '에너지사용비율',
    animation_frame= '년도',
    hover_data = ['시도','지역'],
    #---#
    mapbox_style="carto-positron",
    range_color = [min(tidydata['에너지사용비율']),max(tidydata['에너지사용비율'])],
    center={"lat":  37.5612, "lon": 126.8228},
    opacity = 0.5,
    zoom= 9,
    height=800,
    width=750
)
fig5.show(config={'scrollZoom':False})



```



```{python}
#| title:  에너지사용량차이(전기-도시가스) 시각화        
fig4.show(config={'scrollZoom':False})
```

```{python}
#| title: (서울+김포)특별시?        
fig5.show(config={'scrollZoom':False})
```



# 기말고사3-(1),(2)
```{python}
#| output: false
df=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2021/master/_notebooks/2021-10-25-FIFA22_official_data.csv').drop(['Loaned From','Marking'],axis=1).dropna()
df.head()

continent_dict = {
    'Asia': ['Afghanistan', 'Japan', 'Macau', 'Chinese Taipei', 'Indonesia', 'Korea Republic', 'Kazakhstan', 'Kyrgyzstan', 'Bhutan', 'Philippines', 'Syria', 'China PR', 'Oman', 'Guam', 'Vietnam', 'Jordan', 'Palestine', 'Malaysia', 'Hong Kong', 'Korea DPR', 'Lebanon', 'Uzbekistan', 'India','Iraq', 'Iran', 'Saudi Arabia', 'United Arab Emirates','Australia'],
    'Europe': ['Portugal', 'Germany', 'Belgium', 'Netherlands', 'Croatia', 'Spain', 'Austria', 'Italy', 'France', 'Serbia', 'England', 'Poland', 'Ukraine', 'Wales', 'Scotland', 'Czech Republic', 'Slovakia', 'Romania', 'Bosnia and Herzegovina', 'Republic of Ireland', 'Norway', 'Sweden', 'Bulgaria', 'Lithuania', 'Estonia', 'Latvia', 'Liechtenstein','Albania','Denmark','Finland','Greece','Hungary','Iceland','Luxembourg','Northern Ireland','Slovenia','Switzerland','Andorra','Azerbaijan','Belarus','Cyprus','Faroe Islands','Georgia','Kosovo','Malta','Moldova','Montenegro','North Macedonia','Armenia','Gibraltar','Russia','Turkey','Israel'],
    'South America': ['Uruguay', 'Argentina', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Paraguay', 'Venezuela', 'Suriname', 'Bolivia','Peru','Guyana'],
    'Africa': ['Egypt', "Côte d'Ivoire", 'Senegal', 'Morocco', 'Ghana', 'Algeria', 'Guinea', 'Mali', 'Congo DR', 'Liberia', 'Cameroon', 'Tunisia', 'Comoros', 'Kenya', 'South Africa', 'Zimbabwe', 'Madagascar', 'Mozambique', 'Equatorial Guinea', 'Congo', 'Burundi', 'Grenada', 'Thailand', 'Togo', 'Sudan', 'Mauritania','Guinea Bissau','Libya','Nigeria','Zambia','Angola','Benin','Burkina Faso','Cape Verde Islands','Central African Republic','Chad','Eritrea','Gabon','Gambia','Mauritius','Namibia','Rwanda','Sierra Leone','South Sudan','São Tomé e Príncipe','Uganda','Niger'],
    'North and Central America': ['Antigua and Barbuda', 'Barbados', 'Belize', 'Bermuda', 'Canada', 'Costa Rica', 'Cuba', 'Curacao', 'Dominican Republic', 'El Salvador', 'Guatemala', 'Haiti', 'Honduras', 'Jamaica', 'Mexico', 'Montserrat', 'Panama', 'Puerto Rico', 'Saint Kitts and Nevis', 'Saint Lucia', 'Trinidad and Tobago', 'United States'],
    'Oceania': ['New Zealand', 'Fiji', 'Papua New Guinea','New Caledonia'],
}
position_dict = {
    'GOALKEEPER':{'GK'},
    'DEFENDER':{'CB','RCB','LCB','RB','LB','RWB','LWB'},
    'MIDFIELDER':{'CM','RCM','LCM','CDM','RDM','LDM','CAM','RAM','LAM','RM','LM'},
    'FORWARD':{'ST','CF','RF','LF','RW','LW','RS','LS'},
    'SUB':{'SUB'},
    'RES':{'RES'}
}

# df전처리
tidy1 = df.assign(Position = df.Position.str.split('>').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),
          Continent = df.Nationality.apply(lambda x : [k for k,v in continent_dict.items() if x in v].pop()),
          Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)).eval('logWage = log(Wage)')
tidy1

#####문제1
####(1)
tidydata = tidy1.pivot_table(index = 'Continent', values = ['Overall', 'logWage','Age'],aggfunc={'Overall': 'mean', 'logWage': 'mean', 'Age': 'count'})\
.reset_index().rename({'Age' : 'PlayerSize','Overall' : 'Overall(Mean)','logWage':'logWage(Mean)' }, axis = 1)
tidydata


fig6 = tidydata.plot.scatter(
    x='Overall(Mean)',y='logWage(Mean)',
    color='Continent',
    size='PlayerSize',
    width=600,
    text = 'Continent',

    title =  'Figure1 : 인적자원(대륙별)'
)
fig6.show()


####(2)
tidydata = tidy1.pivot_table(index = ['Continent','Nationality'], values = ['Overall', 'logWage','Age'],aggfunc={'Overall': 'mean', 'logWage': 'mean', 'Age': 'count'})\
.reset_index().rename({'Age' : 'PlayerSize','Overall' : 'Overall(Mean)','logWage':'logWage(Mean)' }, axis = 1)
tidydata

fig7 = tidydata.plot.scatter(
    x='Overall(Mean)',y='logWage(Mean)',
    color='Continent',
    size='PlayerSize',
    hover_data = ['Nationality'],
    width=600,
    title =  'Figure2 : 인적자원(국가별)'
)
fig7.show()


#### (3)
tidydata = tidy1.query('Continent == "Asia"').pivot_table(index = 'Nationality', values = ['Overall', 'Age'], aggfunc = {'Overall' : 'mean', 'Age' : 'count'} ).reset_index()\
.rename({'Age':'PlayerSize'}, axis = 1).assign(Strength = lambda _df : _df.Overall +_df.PlayerSize/5).sort_values('Strength', ascending = False)\
.reset_index(drop = True).assign(prob = lambda _df : _df.index < 8).rename({'prob':'8강 가능성'}, axis = 1)

tidydata

tidydata = tidydata.assign(a = (tidydata['Overall']).round(2).astype(str) + '+' + tidydata['PlayerSize'].astype(str) + '=' + tidydata['Strength'].astype(str))
tidydata

fig8 =tidydata.plot.bar(
    x='Strength',y='Nationality',
    color='8강 가능성',
    text= 'a',
    title = 'Figure1 : Overall + PlayerSize = Strength '
)

```



```{python}
#| title:  대륙별 인적자원 시각화        
fig6.show()
```

```{python}
#| title: 대륙별 인적자원 시각화        
fig7.show()
```
```{python}
#| title: 아시안컵은 누가 차지할까        
fig8.show()
```











































